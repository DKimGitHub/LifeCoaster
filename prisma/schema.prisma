// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id    String  @id @default(cuid())
  name  String?
  image String?

  email         String?   @unique
  emailVerified DateTime?

  posts    Post[]
  accounts Account[]
  sessions Session[]
  comments Comment[]

  @@map(name: "users")
}

model Post {
  id        String    @id @default(cuid())
  title     String?
  content   String?
  published Boolean   @default(false)
  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime  @updatedAt @map(name: "updated_at")
  user      User?     @relation(fields: [userId], references: [id])
  userId    String?
  graph     Graph?
  isYear    Boolean   @default(false)
  comments  Comment[]

  usersWhoHearted String[]
  numOfHearts     Int      @default(0)
}

model Graph {
  id     String  @id @default(cuid())
  postId String? @unique
  post   Post?   @relation(fields: [postId], references: [id], onDelete: Cascade)
  nodes  Node[]
  event  Event[]

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime? @updatedAt @map(name: "updated_at")

  dummy Boolean
}

model Event {
  id           String         @id @default(cuid())
  nextYear     Int
  type         String?
  period       Period?
  specificYear SpecificYear[]
  graph        Graph?         @relation(fields: [graphId], references: [id], onDelete: Cascade)
  graphId      String
  
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime? @updatedAt @map(name: "updated_at")

}

model Period {
  id          String  @id @default(cuid())
  value       Int?
  description String?
  event       Event?  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId     String  @unique

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime? @updatedAt @map(name: "updated_at")

}

model SpecificYear {
  id          String  @id @default(cuid())
  year        Int?
  value       Int?
  description String?
  event       Event   @relation(fields: [eventId], references: [id], onDelete: Cascade) 
  eventId     String

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime? @updatedAt @map(name: "updated_at")

}

model Node {
  id      String  @id @default(cuid())
  graphId String
  graph   Graph   @relation(fields: [graphId], references: [id])
  title   String?
  content String?
  y  Int
  x  Int
}

model Comment {
  id        String   @id @default(cuid())
  text      String @default("")
  createdAt DateTime @default(now()) @map(name: "created_at")
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  postId    String?
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Account {
  id                 Int     @id @default(autoincrement())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

