// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    Int     @id @default(autoincrement())
  name  String?
  image String?

  email         String?   @unique
  emailVerified DateTime?

  posts    Post[]
  accounts Account[]
  sessions Session[]
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String?
  content   String?
  published Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  Int?
  graph     Graph?
  isYear    Boolean  @default(false)
}

model Graph {
  id     Int     @id @default(autoincrement())
  postId Int?    @unique
  post   Post?   @relation(fields: [postId], references: [id])
  nodes  Node[]
  isYear Boolean @default(false)
}

model Node {
  id      Int     @id @default(autoincrement())
  graphId Int
  graph   Graph   @relation(fields: [graphId], references: [id])
  title   String
  content String?
  yValue  Int
  xValue  Int
}



model Account {
  id                 Int     @id @default(autoincrement())
  userId             Int     
  type               String
  provider           String
  providerAccountId  String  
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int      
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
